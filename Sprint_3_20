Sub Module	VBL Changes Analysis	API Design Readiness(Swagger Definition)	 CMS Design	"UI Development  
Mobile (iOS,Android)"	"UI Development 
 Web "	Mock API integration 	UI Internal Code Review
E2E Straight Through flow	100%	100%	100%	100%	100%	"Mobile 100% ETA (16th Mar)
Web 40% (17th Mar)
(20th Mar)"	"100% Mob ETA (16th Mar)
80% (ETA 20th Mar)
"
Resumption Flows	100%	100%	100%	100% (13-Mar)	"100% (16-Mar)
18-Mar 19-Mar"	"Mobile 100% ETA (17th Mar)
Web 30% (18th Mar)
"	"100% Mob ETA (18th Mar)  
50% Web (ETA 20th Mar)"
Debit Card Creation	100%	100%	100%	100%	"100% (16-Mar)
17-Mar"	"Mobile 70% ETA (17th Mar)
Web 20% (18th Mar)
"	"90% Mob ETA (20th Mar)
60% (ETA 20-Mar)"
Rating	100%	100%	100%	100%	"100% (16-Mar)
17-Mar"	"Mobile 80% ETA (17th Mar)
Web 20% (18th Mar)
"	"Mobile 80% ETA (20th Mar)
Web 60% (ETA 20th Mar)"
E2E Straight Through flow	100%	100%	100%	100% (13-Mar)	100%	"Mobile 80% ETA (17th Mar)
Web 20% (18th Mar)
"	" 90% Mobile ETA (20th Mar)
60% Web (ETA 20th-Mar)"
Resumption Flows - Pre Login	100%	100%	100%	100% (16-Mar)	100% (18-Mar)	"Mobile 60% ETA (17th Mar)
Web 0% (19th Mar)
"	" 80% Mob ETA (20th Mar)
10% Web (ETA 20-Mar)"
Resumption Flows - Post Login	100%	100%	100%	100% (16-Mar)	0% (20-Mar)	"Mobile 0% 
Web 0% 
(20th Mar)
"	" 80% Mob ETA (21st Mar)
0% Web (ETA 21st-Mar)"
Credentials Login	"New vbl changes analysis based on IAM, ETA 13th Mar
18-Mar, Have a scheduled call on 19th Mar"	100%	100%	100%	100%	"Mobile 60% 
Web 40% 
(20th Mar)"	" 80% Mob ETA (21st Mar)
80% Web (ETA 21st-Mar)"
Biometric Login		100%	100%	100%	NA		100%
Passcode Login		100%	100%	100%	NA	TBD	 100% Mob ETA (18th Mar)
Pre Login Functions - Disable Credentails / Forgot Credentials		50% (ETA 19-Mar)	100%	100%	100%		" 100% Mob ETA (19th Mar)
100% Web (ETA 19th-Mar)"
Credentials Update - Password, Passcode & Biometric	TBD	50% (ETA 19-Mar)	100%	100%	100%		" 100% Mob ETA (19th Mar)
100% Web (ETA 19th-Mar)"
TPIN & Security Tips		TBD	100%	100%	"70% (19-Mar)
23-Mar"		" 100% Mob ETA (18th Mar)
50% Web (ETA 22nd-Mar)"
Trusted Device Management	TBD	TBD	100%	100%	"70% (19-Mar)
23-Mar"		" 90% Mob ETA (18th Mar)
50% Web (ETA 22nd-Mar)"
Logout / Timeout		50% (ETA 19-Mar)	100%	100%	100%		100%
Minor	Dependent on Transaction detail finalization		100%	80%	0%		" 80% Mob ETA (17th Mar)
0% Web (ETA 23rd-Mar)"
Minor	NA		100%	80%	0%		" 80% Mob ETA (17th Mar)
0% Web (ETA 23rd-Mar)"


    "AuthenticationLoginLblWelcomeWeb": "Welcome to",
    "AuthenticationLoginLblWelcomeMeemLblWeb": "meem",
    "AuthenticationLoginLblWelcomeBankingLblWeb": "Banking made simple",
    "AuthenticationLoginLblDontAccountYetWeb": "Don’t you have an account yet?",
    "AuthenticationLoginLblJoinMeemWeb": "Join meem",
    "AuthenticationLoginLblSupportWeb": "Support",
    "AuthenticationLoginLblDisableCredentialWeb": "Disable credentials",
    "AuthenticationLoginLblComplaintsWeb": "Complaints handling process",
    "AuthenticationTrusteDeviceSecureLblTitleWeb": "Trusted browser",
    "AuthenticationTrusteDeviceSecureLblSubtitleWeb": "To keep your account secure we need to register this browser as trusted. Request a call back and follow the instructions",
    "AuthenticationTrusteDeviceToastLblWeb": "Trusted browser registered",
    "AuthenticationLinkedDeviceLblTitleWeb": "This device is linked to another user",
    "AuthenticationLinkedDeviceBtnLoginWeb": "Log in",
    "AuthenticationLinkedDeviceImgWarningWeb": "is no longer a trusted browser",
    "AuthenticationDeviceLimitBtnLoginWeb": "Log in",
    "AuthenticationDeviceLimitImgWarningWeb": "is no longer a trusted browser",
    "AuthenticationSuccessfullUpdateCredentialsLblSubtitleWeb": "Please log in using your new username and password.",
    "AuthenticationSuccessfullUpdateCredentialsBtnHomeWeb": "Home",
    "SettingsProfileSettingLblAnychangeyouhaveWeb": "Any changes you made won’t be saved.",
    "AuthenticationCreateUserNameBtnNextWeb": "Next",
    "AuthenticationCreateUserNameBtnBackWeb": "Back",
    "AuthenticationCreateUserNameLblListrequirement5Web": "Minimum length of 8 characters",
    "AuthenticationCreateUserNameLblListrequirement6Web": "Maximum length of 20 characters",
    "AuthenticationCreatePasswordBtnBackWeb": "Back",
    "AuthenticationCreatePasswordTxtPasswordplacWeb": "Enter your new password",
    "AuthenticationCreatePasswordTxtReppasswordplacWeb": "Repeat your new password",
    "AuthenticationCreatePasswordLblListrequirement1Web": "One lowercase letter (a-z)",
    "AuthenticationCreatePasswordLblListrequirement2Web": "One uppercase letter (A-Z)",
    "AuthenticationCreatePasswordLblListrequirement3Web": "One number (0-9)",
    "AuthenticationCreatePasswordLblListrequirement4Web": "One special character (!@#$%^&*?_-)",
    "AuthenticationCreatePasswordLblListrequirement5Web": "Minimum length of 8 characters",
    "AuthenticationCreatePasswordLblListrequirement6Web": "Maximum length of 20 characters",
    "AuthenticationRegisterDeviceLblTitleWeb": "Could not register your device as trusted",
    "AuthenticationRegisterDeviceLblSubtitleWeb": "Please login and try again",
    "AuthenticationRegisterDeviceBtnLoginWeb": "Login",
    "AuthenticationTrustedDeviceNegativeLblTitleWeb": "You can only have one trusted browser per account",
    "AuthenticationTrustedDeviceNegativeLblSubtitleWeb": "To continue, remove the existing one and register this browser instead.",
    "AuthenticationTrustedDeviceNegativeBrowserLblWeb": "Trusted browser",
    "AuthenticationTrustedDeviceNegativeBtnRemoveWeb": "Remove",
    "AuthenticationTrustedDeviceNegativePopupLblTitleWeb": "Are you sure you want to remove Google Chrome 16.6 as a trusted browser?",
    "AuthenticationTrustedDeviceNegativePopupLblSubtitleWeb": "To log in, you need to register a trusted browser again.",
    "AuthenticationTrustedDeviceNegativePopupBtnCancelWeb": "Cancel",
    "AuthenticationTrustedDeviceNegativePopupBtnRemoveWeb": "Remove",
    "TimeoutLoginLblBtmsubtitleWeb": "For your security, your session has ended. Log in again to continue.",




import React, {useState} from 'react';
import {View} from 'react-native';
import * as Components from '@app/components';
import {useFormik} from 'formik';
import {
  OnboardingNonUsTaxDeclarationIdentificationInitialValues,
  OnboardingNonUsTaxDeclarationIdentificationSchema,
} from '@app/features/onboarding/schemas/onboarding-tax-identification-number';
import {translation, Theme, useNewTheme} from 'react-core';
import {getStyles} from './styles';
import {variants} from 'app/components/label/types';
import {TaxIdentificationNumberScreenProperties} from './types';
import {SizeType, TabItemType} from 'app/components/tab/types';
import {
  ButtonSizes,
  ButtonTypes,
  ButtonVariants,
} from 'app/components/custom-button/types';
import {OnboardingRoutes, PhoneNumberLength9} from 'app/constants';
import {OptionItemType} from 'app/components/option-button/types';

const TaxIdentificationNumber: React.FC<
  TaxIdentificationNumberScreenProperties
> = ({navigation}) => {
  const theme: Theme = useNewTheme();
  const styles = getStyles(theme);
  const {t} = translation.useTranslation();
  const DATA: TabItemType[] = [
    {id: 1, name: t('OnboardingTaxIdentificationNumberChip1')},
    {id: 2, name: t('OnboardingTaxIdentificationNumberChip2')},
  ];
  const ReasonData = [
    {id: '1', name: 'Not required'},
    {id: '2', name: 'Temporary Visitor'},
  ];
  const [selectedTab, setSelectedTab] = useState<TabItemType>();
  const [visible, setVisible] = useState(false);
  const [selectedOption, setSelectedOption] = useState<OptionItemType>();
  const onSelectItem = (item: OptionItemType) => {
    setSelectedOption(item);
    formik.setFieldValue('reason', item.name);
    setVisible(false);
  };

  const disableButton = (): boolean => {
    if (selectedTab?.name === 'Yes' && formik.values.identificationNumber) {
      return false;
    } else if (selectedTab?.name === 'No' && formik.values.reason) {
      return false;
    } else {
      return true;
    }
  };

  const formik = useFormik({
    validateOnChange: true,
    validateOnBlur: true,
    initialValues: OnboardingNonUsTaxDeclarationIdentificationInitialValues,
    validationSchema: OnboardingNonUsTaxDeclarationIdentificationSchema,
    onSubmit: () => {
      navigation.navigate(OnboardingRoutes.Status, {
        name: 'status',
      });
    },
  });

  return (
    <Components.ScreenContainer
      id="vwOnboardingNonUsTaxDeclarationIdentification"
      showGoBackIcon
      bottomScreenContent={
        <View id="vwStickyButtonBar" style={styles.vwStickyButtonBarStyles}>
          <Components.Button
            id="btnNext"
            inverted={false}
            label={t('OnboardingTaxTypeBtnNext')}
            type={ButtonTypes.text}
            variant={ButtonVariants.primary}
            size={ButtonSizes.large}
            disabled={disableButton()}
            onPress={formik.handleSubmit}
          />
        </View>
      }>
      <View id="vwContainer" style={styles.containerStyle}>
        <View id="vwHeader" style={styles.headerStyle}>
          <View id="vwText" style={styles.textStyle}>
            <Components.Label
              id="lblTitle"
              style={styles.lblTitleStyle}
              variant={variants.titleXL}
              text={t('OnboardingTaxIdentificationNumberLblTitle')}
            />
            <Components.Label
              id="lblSubtitle"
              style={styles.lblSubtitleStyle}
              text={t('OnboardingTaxIdentificationNumberLblSubtitle')}
              variant={variants.bodyRegularM}
            />
          </View>
        </View>
        <View id="vwBody" style={styles.bodyStyle}>
          <View id="vwSection" style={styles.sectionStyle}>
            <Components.Label
              id="lblChipTitle"
              style={styles.lblChipTitleStyle}
              variant={variants.bodyMediumM}
              text={t('OnboardingTaxIdentificationNumberLblNumber')}
            />
            <Components.Tab
              id="btnOption"
              data={DATA}
              size={SizeType.small}
              onSelect={(item: TabItemType) => {
                setSelectedTab(item);
                formik.setFieldValue('SelectedTab', item.name);
              }}
              selectedTab={selectedTab}
              children={
                selectedTab ? (
                  selectedTab?.name === 'Yes' ? (
                    <View style={styles.dropdownStyle}>
                      <Components.Input
                        id="txtIdentificationNumber"
                        placeholder={t(
                          'OnboardingTaxIdentificationNumberTxtNumber',
                        )}
                        inverted={false}
                        value={formik.values.identificationNumber}
                        setValue={formik.handleChange('identificationNumber')}
                        clearInputValue={() =>
                          formik.setFieldValue('identificationNumber', '')
                        }
                        onFormikBlur={formik.handleBlur('identificationNumber')}
                        errorText={
                          formik.touched.identificationNumber &&
                          formik.errors.identificationNumber
                            ? formik.errors.identificationNumber
                            : undefined
                        }
                        maximumLength={PhoneNumberLength9}
                      />
                    </View>
                  ) : (
                    <View style={styles.dropdownStyle}>
                      <Components.Dropdown
                        id="ddChooseContry"
                        inputText={formik.values.reason}
                        onPress={() => setVisible(!visible)}
                        placeholder={t(
                          'OnboardingTaxIdentificationNumberDdReason',
                        )}
                        errorText={formik.errors.reason}
                        BottomSheet={
                          <Components.BottomSheet
                            id="bsCountry"
                            visible={visible}
                            closeButtonIcon
                            onClose={() => setVisible(!visible)}>
                            <Components.OptionButton
                              id="btnOptions"
                              data={ReasonData}
                              onSelect={onSelectItem}
                              selectedItem={selectedOption}
                            />
                          </Components.BottomSheet>
                        }
                      />
                    </View>
                  )
                ) : null
              }
            />
          </View>
        </View>
      </View>
    </Components.ScreenContainer>
  );
};

export default TaxIdentificationNumber;

    
